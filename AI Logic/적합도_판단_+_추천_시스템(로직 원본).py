# -*- coding: utf-8 -*-
"""적합도 판단 + 추천 시스템.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tuVc_5FGDwKWvy93amLcD42Crl_YfeOH
"""

import pandas as pd
import math
!pip install mysql-connector-python
import mysql.connector
from openai import OpenAI

# ---------------------------------------------------------
# 🔹 OpenAI API Key 설정
# ---------------------------------------------------------
client = OpenAI(api_key="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")  # 🔐 본인 키 입력

# ---------------------------------------------------------
# 🔹 RDS 연결 설정
# ---------------------------------------------------------
RDS_HOST = "ewha-baekkot-ending.c5cq20gw2kei.ap-northeast-2.rds.amazonaws.com"
RDS_USER = "popo"
RDS_PW = "EWHA_ending25"

# ---------------------------------------------------------
# 🔹 사용자 및 상품 설정
# ---------------------------------------------------------
target_user_id = "1"
product_name = "진쫄면 (150GX4)"

# ---------------------------------------------------------
# 1️⃣ RDS에서 사용자 정보 불러오기
# ---------------------------------------------------------
conn = mysql.connector.connect(
    host=RDS_HOST,
    user=RDS_USER,
    password=RDS_PW,
    database="user_info_db"
)

# 🔹 SQL 쿼리 (테이블: user_private)
query_user = """
SELECT user_id, allergies, medical_conditions
FROM user_private
WHERE user_id = %s
"""

user_df = pd.read_sql(query_user, conn, params=[target_user_id])
conn.close()

if user_df.empty:
    raise ValueError(f"'{target_user_id}' 사용자 정보를 찾을 수 없습니다.")

def split_list(x):
    if x is None or (isinstance(x, float) and pd.isna(x)):
        return []
    return [t.strip() for t in str(x).replace(";", ",").split(",") if t.strip()]

user_allergies = split_list(user_df.iloc[0]["allergies"])
user_goals = split_list(user_df.iloc[0]["medical_conditions"])

# ---------------------------------------------------------
# 2️⃣ RDS에서 상품 정보 불러오기
# ---------------------------------------------------------
conn = mysql.connector.connect(
    host=RDS_HOST, user=RDS_USER, password=RDS_PW, database="product_db"
)
query_product = "SELECT * FROM ramen_db"
df = pd.read_sql(query_product, conn)
conn.close()

# ---------------------------------------------------------
# ⚙️ 숫자 변환 유틸 함수 (쉼표, 단위 제거)
# ---------------------------------------------------------
def num(x):
    try:
        return float(str(x).replace(",", "")
                             .replace("mg", "")
                             .replace("g", "")
                             .replace("kcal", "")
                             .strip())
    except:
        return None

df.columns = [c.strip().replace(" ", "") for c in df.columns]

for col in df.columns:
    if any(unit in col for unit in ["mg", "g", "kcal"]):
        df[col] = df[col].apply(num)
if "개별내용량" in df.columns:
    df["개별내용량"] = df["개별내용량"].apply(num)

# ---------------------------------------------------------
# 3️⃣ 선택 제품 추출
# ---------------------------------------------------------
row = df[df["품명"] == product_name]
if row.empty:
    raise ValueError(f"'{product_name}' 제품을 찾을 수 없습니다.")
row = row.iloc[0]

# ---------------------------------------------------------
# 4️⃣ 건강목표별 성분·방향 매핑
# ---------------------------------------------------------
health_condition_rules = {
    "고혈압": {"나트륨": "low"},
    "당뇨": {"당류": "low"},
    "감량": {"칼로리": "low"},
    "고지혈증": {"지방": "low", "포화지방": "low", "트랜스지방": "low"},
    "심혈관질환": {"나트륨": "low", "포화지방": "low", "콜레스테롤": "low"},
    "신장질환": {"나트륨": "low", "단백질": "low"},
    "간질환": {"당류": "low", "지방": "low"},
    "골다공증": {"칼슘": "high", "나트륨": "low"},
    "고콜레스테롤혈증": {"콜레스테롤": "low", "포화지방": "low"},
    "통풍": {"단백질": "low"},
}

target_map = {}
for goal in user_goals:
    if goal in health_condition_rules:
        target_map.update(health_condition_rules[goal])

if not target_map:
    target_map = {"칼로리": "low"}

# ---------------------------------------------------------
# 5️⃣ 알레르기 직접 체크
# ---------------------------------------------------------
notice = str(row.get("알레르기", "")).lower()
if any(a.lower() in notice for a in user_allergies):
    final = "부적합"
else:
    final = "적합"

# ---------------------------------------------------------
# 6️⃣ 성분별 평가
# ---------------------------------------------------------
def calc_per_100(df, key):
    df_valid = df.dropna(subset=["개별내용량"])
    vals = []
    for _, r in df_valid.iterrows():
        try:
            vals.append(float(r.get(key, 0)) / float(r.get("개별내용량", 100)) * 100)
        except:
            continue
    return sum(vals) / len(vals) if vals else None

nutrition_results = []
for key, direction in target_map.items():
    try:
        value = float(row.get(key, 0))
        total = float(row.get("개별내용량", 100))
        per_100 = value / total * 100
    except:
        per_100 = None

    avg_value = calc_per_100(df, key)
    if value == 0 or per_100 == 0:
        status = "미함유"
    elif avg_value is None or per_100 is None:
        status = "정보부족"
    else:
        diff_ratio = per_100 / avg_value if avg_value != 0 else None
        if diff_ratio is None:
            status = "정보부족"
        elif diff_ratio > 1.1:
            status = "평균보다 높음"
        elif diff_ratio < 0.9:
            status = "평균보다 낮음"
        else:
            status = "평균과 비슷함"

    nutrition_results.append({
        "성분": key,
        "값": per_100,
        "평균": avg_value,
        "방향": direction,
        "평가": status
    })

# ---------------------------------------------------------
# 7️⃣ 간접 알레르기 경고
# ---------------------------------------------------------
indirect = row.get("간접알레르기", None)
warning_text = ""
if indirect is not None and not (isinstance(indirect, float) and math.isnan(indirect)):
    indirect_str = str(indirect).lower()
    for a in user_allergies:
        if a.lower() in indirect_str or indirect_str in ["o", "yes", "1", "true"]:
            warning_text = f"⚠️ '{a}' 간접 알레르기 주의"
            break

# ---------------------------------------------------------
# 8️⃣ OpenAI 요약
# ---------------------------------------------------------
try:
    nutrition_summary = ", ".join(
        [f"{n['성분']}({n['평가']}, {n['방향']})" for n in nutrition_results]
    )

    prompt = f"""
사용자 조건:
- 알레르기: {', '.join(user_allergies) if user_allergies else '없음'}
- 건강목표: {', '.join(user_goals)}
- 주요 평가 성분 및 방향: {nutrition_summary}

제품명: {product_name}
최종판정(알레르기 기준): {final}
경고문구: {warning_text}

이 정보를 바탕으로 다음을 자연스럽게 3문장 이내로 설명해줘:
1. 알레르기 기준으로 이 제품이 왜 '{final}' 인지,
2. 사용자의 건강상태(예: 고혈압, 감량 등)와 제품의 성분 특성 간의 관계.
"""
    res = client.responses.create(
        model="gpt-4.1-mini",
        input=prompt,
        temperature=0.3,
    )
    reason = res.output_text.strip()
except Exception:
    reason = "(AI 설명 생성 실패)"

# ---------------------------------------------------------
# 9️⃣ 결과 출력
# ---------------------------------------------------------
print("🔎 제품명:", product_name)
print("✅ 최종 판정:", final)
print("💬 이유:", reason)
if warning_text:
    print(warning_text)

print("\n📊 성분 상세 분석 결과:")
for n in nutrition_results:
    val = n.get("값")
    val_str = f"{val:.2f}" if isinstance(val, (int, float)) and val is not None else "N/A"
    print(f"- {n['성분']}: {val_str} ({n['평가']})")

# ---------------------------------------------------------
# 11️⃣ XGBoost + LightFM 추천 (적합도 결과 기반)
# ---------------------------------------------------------
from sklearn.model_selection import train_test_split
from xgboost import XGBClassifier
!pip install lightfm
from lightfm import LightFM
from lightfm.data import Dataset
import numpy as np

# ---------------------------------------------------------
# 1️⃣ RDS 연결 → product_db.ramen_db 테이블 전체 불러오기
# ---------------------------------------------------------
conn = mysql.connector.connect(
    host=RDS_HOST,
    user=RDS_USER,
    password=RDS_PW,
    database="product_db"
)
df = pd.read_sql("SELECT * FROM ramen_db", conn)
conn.close()

# ---------------------------------------------------------
# 🎯 기준 제품과 유사한 제품 추천
# ---------------------------------------------------------
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
import pandas as pd

# 0) 후보 풀 만들기 (알레르기 포함 제품 제외 + 본인 제품 제외)
def has_allergy(row, allergy_list):
    text = str(row.get("알레르기", "")).lower()
    return any(a.lower() in text for a in allergy_list)

pool_df = df[~df.apply(lambda r: has_allergy(r, user_allergies), axis=1)].copy()
pool_df = pool_df[pool_df["품명"] != product_name].copy()

# 1) 유사도 계산용 영양성분 컬럼
raw_cols = ["열량","칼로리","나트륨","당류","탄수화물","지방","단백질",
            "콜레스테롤","포화지방","트랜스지방","칼슘","카페인"]
nutr_cols = [c for c in raw_cols if c in df.columns]

# 2) per-100 기준 변환
def to_per100_frame(x):
    out = {}
    total = float(x.get("개별내용량", 100)) or 100
    for c in nutr_cols:
        try:
            out[c] = float(x.get(c, np.nan)) / total * 100
        except:
            out[c] = np.nan
    return pd.Series(out)

row = df[df["품명"] == product_name].iloc[0]
base_vec = to_per100_frame(row)
pool_per100 = pool_df.apply(to_per100_frame, axis=1)

# 결측치 보정
fill_vals = pool_per100.median()
pool_per100 = pool_per100.fillna(fill_vals)
base_vec = base_vec.fillna(fill_vals)

# 3) 코사인 유사도 계산
sim = cosine_similarity([base_vec.values], pool_per100.values)[0]
pool_df = pool_df.assign(similarity=sim).sort_values("similarity", ascending=False)

# 4) 상위 6개 출력 (깔끔하게)
top6 = pool_df.head(6)
# ---------------------------------------------------------
#(적합/부적합에 따라 문구 변경)
# ---------------------------------------------------------
print("\n-----------------------------------------------------")
if final == "부적합":
    print("👉 대신 이런 상품을 추천드려요:")
else:
    print("👉 이런 상품도 함께 추천드려요:")
print("-----------------------------------------------------")

# ✅ 유사도 기반 추천 TOP 6 출력
for i, name in enumerate(top6["품명"].tolist(), start=1):
    print(f"{i}. {name}")

print("-----------------------------------------------------")
